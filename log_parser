#!/usr/bin/env raku
use JSON::Fast;
#use Elasticsearch::Data;

use Exporter::Sqlite;
use FailedTests;
use JenkinsLog;
use JenkinsTest;
use Week;

#my $log_dir = '/home/wb/tools/log_parser/logs/'.IO;

my $root = $*PROGRAM.parent;
my $log_dir = $root.add('/logs');

my $db = Exporter::Sqlite.new(database => $root.add('tests.sqlite3').absolute);
# my %auth =
#     username => 'elastic',
#     password => 'verySecret';
#my $elasticsearch = Elasticsearch::Data.new(url => "http://server:9200", index => "tests", auth => %auth);

multi sub MAIN('refresh', Bool :$drop-table) {
    $db.drop-table() if $drop-table;
    $db.create-table();

    my @projects = find-projects($log_dir);
    for @projects -> %project {
        my %total_status =
            failed => 0,
            passed => 0,
            aborted => 0,
            total => 0,
        ;

        say "Check project {%project<name>.uc}";
        %project<id> = $db.find-or-create-project-id(%project<name>);
        say "Look for log files";
        my @log_files = find-files(%project<path>, %project<id>);
        say "{@log_files.elems} log files found";

        say "Parse logs";
        for @log_files -> %log_file_data {
            ++%total_status<total>;
            my %build = $db.get-build(%log_file_data<build>.Int, %project<id>);
            if %build.elems {
                given %build<status> {
                    when 'failure' { ++%total_status<failed>; }
                    when 'success' { ++%total_status<passed> }
                    when 'aborted' { ++%total_status<aborted> }
                }
                # say "Build ", %build<number>, " already parsed - ", %build<status>;
                next;
            }

            print "Parse new log file {%log_file_data<log>.Str}. Status  ";

            my $file = %log_file_data<log>.slurp(:enc('utf8-c8'), :close);
            my $status = JenkinsLog.subparse($file);
            if not $status {
                $db.store-build(%log_file_data<build>.Int, 'no status found', %project<id>, %log_file_data<starttime>.posix);
    #            $elasticsearch.post(data => { build => %log_file_data<build>.Int, status => 'no status found', date => %log_file_data<starttime>.DateTime }, index => 'tests-builds') if %log_file_data<starttime>:exists;
                note "could not find status in log file {%log_file_data<log>}";
                next;
            }

            status($status<finished><status>.Str.lc, %log_file_data, %total_status, $file);
        }

        say "Total/Passed/Failed/Aborted ", "{%total_status<total>}/{%total_status<passed>}/{%total_status<failed>}/{%total_status<aborted>}";
    }

}

multi sub status('failure', %log_file_data, %total_status, Str $file) {
    say 'failure';
    ++%total_status<failed>;
#            $elasticsearch.post(data => { build => %log_file_data<build>.Int, status => 'failure', date => %log_file_data<starttime>.DateTime }, index => 'tests-builds') if %log_file_data<starttime>:exists;
    my $m = JenkinsLog::TestSummaryReport.subparse($file, :actions(Action::JenkinsLog::TestSummaryReport.new));

    if $m {
        my $build_id = $db.store-build(%log_file_data<build>.Int, 'failure', %log_file_data<project_id>, %log_file_data<starttime>.posix);
        my $ma = $m.made;
        my $fail_date = %log_file_data<starttime>.DateTime;
        for $ma.flat -> $h {
            my $name = $h<name>.Str;

            for $h<errors>.flat -> $error {
                my $test_file_id = $db.get-test-file-id($name, %log_file_data<project_id>);

                my $m = FailedTests.subparse($error, :actions(Action::FailedTests.new));

                if $m {
                    for $m.made -> $n {
                        for $n.flat {
                            # my %elastic;
                            # %elastic<test> = $name;
                            # %elastic<build> = %log_file_data<build>;
                            # %elastic<date> = $fail_date;
                            # %elastic<failed_test> = $_;
                            # $elasticsearch.post(data => %elastic);

                            $db.store-test-number($build_id, $test_file_id, $_, $fail_date.posix);
                        }
                    }
                } else {
                    note "Nothing found for test {$h<name>} in error {$error}";
                }
            }
        }
    } else {
        $db.store-build(%log_file_data<build>.Int, 'Error passing log', %log_file_data<project_id>, %log_file_data<starttime>.posix);
        #$elasticsearch.post(data => { build => %log_file_data<build>.Int, status => 'Error passing log', date => %log_file_data<starttime>.DateTime }, index => 'tests-builds') if %log_file_data<starttime>:exists;
        say "war wohl nichts mit {%log_file_data<log>}";
    }
}

multi sub status('aborted', %log_file_data, %total_status, $file) {
    say 'aborted';
    ++%total_status<aborted>;
    $db.store-build(%log_file_data<build>.Int, 'aborted', %log_file_data<project_id>, %log_file_data<starttime>.posix);
    # $elasticsearch.post(data => { build => %log_file_data<build>.Int, status => 'aborted', date => %log_file_data<starttime>.DateTime }, index => 'tests-builds') if %log_file_data<starttime>:exists;
}

multi sub status('success', %log_file_data, %total_status, $file) {
    say 'success';
    ++%total_status<passed>;
    $db.store-build(%log_file_data<build>.Int, 'success', %log_file_data<project_id>, %log_file_data<starttime>.posix);
    # $elasticsearch.post(data => { build => %log_file_data<build>.Int, status => 'success', date => %log_file_data<starttime>.DateTime }, index => 'tests-builds') if %log_file_data<starttime>:exists;
}

multi sub MAIN(:$count = 0, :$since, :$name, :$build, :$project = 'intranet') {
    my $project_id = $db.get-project-id($project.lc);
    unless $project_id {
        note "'$project' does not exists";
        exit 1;
    }

    my $startdate = calculate-since($since);
    dd $startdate;

    my @tests = $db.get-tests($startdate, $name, $build, $project_id);
    for @tests -> %test {
        say %test<test>;
        for %test<numbers>.pairs.sort(*.key.Int) -> $number {
            put "\t", $number.key == -1 ?? 'No plan found in TAP output' ~ "\t" ~ $number.value !! $number;
        }
    }
}

multi sub MAIN('aa', :$count = 0, :$since, :$name, :$build) {
    samewith(:$count, :$since, :$name, :$build, project => 'atikon-api');
}

multi sub MAIN('ao', :$count = 0, :$since, :$name, :$build) {
    samewith(:$count, :$since, :$name, :$build, project => 'onlinetools');
}

multi sub MAIN('cms', :$count = 0, :$since, :$name, :$build) {
    samewith(:$count, :$since, :$name, :$build, project => 'cms');
}

multi sub MAIN('ma', :$count = 0, :$since, :$name, :$build) {
    samewith(:$count, :$since, :$name, :$build, project => 'mein-atikon');
}

multi sub MAIN('deleteandcreatetables') {
    $db.drop-table();
    $db.create-table();
}

multi sub MAIN('passfail', :$start_date, :$end_date, :$week-number, :$show = False, :$project = 'intranet') {
    my $project-id = $db.get-project-id($project.lc);
    my $week = Week.new(DateTime.now.Date);
    $week.earlier(week => $week-number) if $week-number;
    my @builds = $db.get-builds($project-id.Int, $week.start-date.DateTime.posix, $week.end-date.DateTime.posix);

    my ($passed, $failed, $aborted) = (0, 0, 0);
    my $total = @builds.elems;

    say "Project: $project";
    say "Week {$week.start-date.Str} to {$week.end-date.Str}";

    for @builds -> $build {
        say $build<number>, "\t", $build<status> if $show;
        given $build<status> {
            when 'success' { ++$passed }
            when 'failure' { ++$failed }
            when 'aborted' { ++$aborted }
        }
    }

    say "Total/Passed/Failed/Aborted: $total/$passed/$failed/$aborted"; 
}

sub calculate-since($since) {
    return unless $since;

    return $since if is-date($since);

    given $since {
        when 'yesterday' { return DateTime.now.earlier(:1day).Date.Str }
        when /(\d+) 'd' 'ay'? 's'?/ { return DateTime.now.earlier(day => $0.Int).Date.Str }
        when /(\d+) 'w' 'eek'? 's'?/ { return DateTime.now.earlier(week => $0.Int).Date.Str }
        default { die "Could not calculate since from string: '$since'. Expected are strings like '2022-06-06', '2days', '1week' or 'yesterday'"}
    }
}

sub is-date(Str $string --> Bool) {
    return False unless $string;

    return True if so $string ~~ /\d ** 4 '-' \d ** 2 '-' \d ** 2/;

    return False;
}

sub find-projects($dir) {
    my @projects;

    for $dir.dir -> $item {
        next unless $item.d;

        @projects.push: %(name => $item.basename, path => $item.absolute);
    }

    return @projects;
}

sub find-files(IO() $dir, Int $project_id) {
    my @files;

    for $dir.dir -> $item {
        if $item.d {
            @files.append(find-files($item, $project_id));
            next;
        }
        next unless $item.basename eq 'log';

        my %test_data = %(project_id => $project_id);
        my $build = $item.parent.add('build.xml');
        if $build.e {
            my @build_content = $build.slurp(:close);
            for @build_content -> $line {
                if $line ~~ /'<startTime>' $<starttime>=\d+ '</startTime>'/ {
                    %test_data<starttime> = DateTime.new(+$<starttime> / 1000).local;
                }
            }
        }

        if not %test_data<starttime>:exists {
            %test_data<starttime> = DateTime.new(0);
        }

        %test_data<build> = $item.parent.basename;
        if not %test_data<build>:exists {
            note "build not found: ", $item.parent;
        }

        %test_data<log> = $item;

        @files.push: %test_data;
    }

    return @files;
}
